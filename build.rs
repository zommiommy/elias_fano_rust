use std::io::Write;

const SETTINGS: &[&str] = &[
    "outdegrees",
    "blocks",
    "residuals",
    "references",
    "block_count",
    "offsets",
];

fn main() {
    println!("cargo:rerun-if-changed=./build.rs");
    let content = format!(
        r#"
//! THIS FILE IS AUTOMATICALLY GENERATED FROM build.rs DO NOT MODIFY IT HERE
use super::*;

pub struct RuntimeWebGraphReaderBackend{{
    //data: BACKEND,
    settings: CodesSettings,
    // manual Virtual Table of the methods so we can do 
    // single static dispatching to avoid having a the switch
    {params_definition}
    {params_codes_definiton}
}}

impl RuntimeWebGraphReaderBackend {{
    fn new(settings: CodesSettings) -> Self {{
        {code_dispatcher}

        RuntimeWebGraphReaderBackend{{
            settings: settings,
            {params}
            {codes}
        }}
    }}

    {code_impls}
    
}}

impl RuntimeWebGraphReaderBackend {{
    {trait_impl}
}}
"#,
        params_definition = SETTINGS
            .iter()
            .map(|x| format!("{}_param: usize,", x))
            .collect::<Vec<_>>()
            .join("\n"),
        params_codes_definiton = SETTINGS
            .iter()
            .map(|x| format!("{}_code: fn(inner: &mut Self) -> Result<usize>,", x))
            .collect::<Vec<_>>()
            .join("\n"),
        params = SETTINGS
            .iter()
            .map(|x| format!("{}_param,", x))
            .collect::<Vec<_>>()
            .join("\n"),
        codes = SETTINGS
            .iter()
            .map(|x| format!("{}_code,", x))
            .collect::<Vec<_>>()
            .join("\n"),
        code_dispatcher = SETTINGS
            .iter()
            .map(|x| format!(
                r#"
let ({}_code, {}_param) = match settings.{} {{
    Code::Unary => (Self::read_unary, 0),
    Code::Gamma => (Self::read_gamma, 0),
    Code::Delta => (Self::read_delta, 0),
    Code::Golomb(B) => (Self::{}_golomb, B),
    Code::Zeta(K) => (Self::{}_zeta, K),
    _ => unimplemented!("The wanted code is not implemented yet."),
}};     
        "#,
                x, x, x, x, x
            ))
            .collect::<Vec<_>>()
            .join("\n"),
        code_impls = SETTINGS
            .iter()
            .map(|x| format!(
                r#"
fn {}_golomb(&mut self) -> usize {{
    self.read_golomb_runtime(self.{}_param)
}}

fn {}_zeta(&mut self) -> usize {{
    self.read_zeta_runtime(self.{}_param)
}}
"#,
                x, x, x, x
            ))
            .collect::<Vec<_>>()
            .join("\n"),
        trait_impl = SETTINGS
            .iter()
            .map(|x| format!(
                r#"
fn read_{}(&mut self) -> usize {{
    (self.{}_code)(self)
}}"#,
                x, x
            ))
            .collect::<Vec<_>>()
            .join("\n"),
    );

    let mut file = std::fs::File::create("./src/webgraph/runtime_webgraph_backend.rs").unwrap();
    file.write_all(content.as_bytes()).unwrap();

    assert!(
        std::process::Command::new("cargo")
            .args(&["fmt"])
            .current_dir(".")
            .status()
            .expect("Could not run format on the python bindings")
            .success(),
        "The cargo format failed and returned non-zero exit status"
    );
}
