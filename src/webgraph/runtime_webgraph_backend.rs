
//! THIS FILE IS AUTOMATICALLY GENERATED FROM build.rs DO NOT MODIFY IT HERE
use super::*;

pub struct RuntimeWebGraphReaderBackend{
    //data: BACKEND,
    settings: CodesSettings,
    // manual Virtual Table of the methods so we can do 
    // single static dispatching to avoid having a the switch
    outdegrees_param: usize,
blocks_param: usize,
residuals_param: usize,
references_param: usize,
block_count_param: usize,
offsets_param: usize,
    outdegrees_code: fn(inner: &mut Self) -> Result<usize>,
blocks_code: fn(inner: &mut Self) -> Result<usize>,
residuals_code: fn(inner: &mut Self) -> Result<usize>,
references_code: fn(inner: &mut Self) -> Result<usize>,
block_count_code: fn(inner: &mut Self) -> Result<usize>,
offsets_code: fn(inner: &mut Self) -> Result<usize>,
}

impl RuntimeWebGraphReaderBackend {
    fn new(settings: CodesSettings) -> Self {
        
let (outdegrees_code, outdegrees_param) = match settings.outdegrees {
    Code::Unary => (Self::read_unary, 0),
    Code::Gamma => (Self::read_gamma, 0),
    Code::Delta => (Self::read_delta, 0),
    Code::Golomb(B) => (Self::outdegrees_golomb, B),
    Code::Zeta(K) => (Self::outdegrees_zeta, K),
    _ => unimplemented!("The wanted code is not implemented yet."),
};     
        

let (blocks_code, blocks_param) = match settings.blocks {
    Code::Unary => (Self::read_unary, 0),
    Code::Gamma => (Self::read_gamma, 0),
    Code::Delta => (Self::read_delta, 0),
    Code::Golomb(B) => (Self::blocks_golomb, B),
    Code::Zeta(K) => (Self::blocks_zeta, K),
    _ => unimplemented!("The wanted code is not implemented yet."),
};     
        

let (residuals_code, residuals_param) = match settings.residuals {
    Code::Unary => (Self::read_unary, 0),
    Code::Gamma => (Self::read_gamma, 0),
    Code::Delta => (Self::read_delta, 0),
    Code::Golomb(B) => (Self::residuals_golomb, B),
    Code::Zeta(K) => (Self::residuals_zeta, K),
    _ => unimplemented!("The wanted code is not implemented yet."),
};     
        

let (references_code, references_param) = match settings.references {
    Code::Unary => (Self::read_unary, 0),
    Code::Gamma => (Self::read_gamma, 0),
    Code::Delta => (Self::read_delta, 0),
    Code::Golomb(B) => (Self::references_golomb, B),
    Code::Zeta(K) => (Self::references_zeta, K),
    _ => unimplemented!("The wanted code is not implemented yet."),
};     
        

let (block_count_code, block_count_param) = match settings.block_count {
    Code::Unary => (Self::read_unary, 0),
    Code::Gamma => (Self::read_gamma, 0),
    Code::Delta => (Self::read_delta, 0),
    Code::Golomb(B) => (Self::block_count_golomb, B),
    Code::Zeta(K) => (Self::block_count_zeta, K),
    _ => unimplemented!("The wanted code is not implemented yet."),
};     
        

let (offsets_code, offsets_param) = match settings.offsets {
    Code::Unary => (Self::read_unary, 0),
    Code::Gamma => (Self::read_gamma, 0),
    Code::Delta => (Self::read_delta, 0),
    Code::Golomb(B) => (Self::offsets_golomb, B),
    Code::Zeta(K) => (Self::offsets_zeta, K),
    _ => unimplemented!("The wanted code is not implemented yet."),
};     
        

        RuntimeWebGraphReaderBackend{
            settings: settings,
            outdegrees_param,
blocks_param,
residuals_param,
references_param,
block_count_param,
offsets_param,
            outdegrees_code,
blocks_code,
residuals_code,
references_code,
block_count_code,
offsets_code,
        }
    }

    
fn outdegrees_golomb(&mut self) -> usize {
    self.read_golomb_runtime(self.outdegrees_param)
}

fn outdegrees_zeta(&mut self) -> usize {
    self.read_zeta_runtime(self.outdegrees_param)
}


fn blocks_golomb(&mut self) -> usize {
    self.read_golomb_runtime(self.blocks_param)
}

fn blocks_zeta(&mut self) -> usize {
    self.read_zeta_runtime(self.blocks_param)
}


fn residuals_golomb(&mut self) -> usize {
    self.read_golomb_runtime(self.residuals_param)
}

fn residuals_zeta(&mut self) -> usize {
    self.read_zeta_runtime(self.residuals_param)
}


fn references_golomb(&mut self) -> usize {
    self.read_golomb_runtime(self.references_param)
}

fn references_zeta(&mut self) -> usize {
    self.read_zeta_runtime(self.references_param)
}


fn block_count_golomb(&mut self) -> usize {
    self.read_golomb_runtime(self.block_count_param)
}

fn block_count_zeta(&mut self) -> usize {
    self.read_zeta_runtime(self.block_count_param)
}


fn offsets_golomb(&mut self) -> usize {
    self.read_golomb_runtime(self.offsets_param)
}

fn offsets_zeta(&mut self) -> usize {
    self.read_zeta_runtime(self.offsets_param)
}

    
}

impl RuntimeWebGraphReaderBackend {
    
fn read_outdegrees(&mut self) -> usize {
    (self.outdegrees_code)(self)
}

fn read_blocks(&mut self) -> usize {
    (self.blocks_code)(self)
}

fn read_residuals(&mut self) -> usize {
    (self.residuals_code)(self)
}

fn read_references(&mut self) -> usize {
    (self.references_code)(self)
}

fn read_block_count(&mut self) -> usize {
    (self.block_count_code)(self)
}

fn read_offsets(&mut self) -> usize {
    (self.offsets_code)(self)
}
}
